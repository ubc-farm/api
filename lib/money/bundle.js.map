{"version":3,"file":null,"sources":["index.js"],"sourcesContent":["/**\r\n * Class used to represent money. \r\n * Internally represents its value as an integer, to avoid float math issues\r\n * @extends Number\r\n * @alias module:lib/money.default\r\n * @typicalname money\r\n */\r\nexport default class Money extends Number {\r\n\t/**\r\n\t * @param {number|number[]} money - if an array, \r\n\t * uses money[0] as dollars and money[1] as cents. If a float, try to convert\r\n\t * it to an integer representing cents (multiply by 100).\r\n\t * @param {Object} [options]\r\n\t * @param {boolean} [options.convert=true] - if false, parse the money\r\n\t * integer as dollars instead of cents.\r\n\t * @param {number} [options.exactness=0] - lets you use cent values smaller \r\n\t * than $0.01. \r\n\t */\r\n\tconstructor(money, options = {}) {\r\n\t\tconst {convert = true, exactness = 0} = options;\r\n\r\n\t\tlet dollars, cents = 0;\r\n\t\tif (Array.isArray(dollars)) [dollars, cents] = money;\r\n\t\telse if (!Number.isInteger(dollars)) {\r\n\t\t\tdollars = Math.trunc(money);\r\n\t\t\tcents = (money - dollars) * 100;\r\n\t\t} else if (convert) {\r\n\t\t\tsuper(money);\r\n\t\t\treturn;\r\n\t\t} \r\n\r\n\t\tconst tenPow = Math.pow(10, exactness);\r\n\t\tcents = Math.trunc(tenPow * cents) / tenPow;\r\n\r\n\t\tsuper((dollars * 100) + cents);\r\n\t}\r\n\r\n\t/** @type {number} */\r\n\tget dollars() {\r\n\t\treturn Math.trunc(this / 100);\r\n\t}\r\n\t/** @type {number} */\r\n\tget cents() {\r\n\t\treturn this - (this.dollars * 100);\r\n\t}\r\n\r\n\t/**\r\n\t * Convert the money into a string\r\n\t * @param {boolean} [dollarSign] if true, prepends a dollar sign to the string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString(dollarSign = false) {\r\n\t\tconst centsString = this.cents.toString().replace('.', '');\r\n\t\tconst $ = dollarSign ? '$' : '';\r\n\t\treturn `${$}${this.dollars}.${centsString}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Convert the money into a float instead of an integer\r\n\t */\r\n\ttoFloat() {\r\n\t\treturn this / 100;\r\n\t}\r\n}"],"names":[],"mappings":";;;;;;;;;;AAOA,AAAe,CAAA,MAAM,KAAN,SAAoB,MAApB,CAA2B;;;;;;;;;;;AAWzC,CAAA,aAAY,KAAZ,EAAmB,UAAU,EAA7B,EAAiC;AAChC,CAAA,QAAM,EAAC,UAAU,IAAX,EAAiB,YAAY,CAA7B,KAAkC,OAAxC;;AAEA,CAAA,MAAI,OAAJ;AAAA,CAAA,MAAa,QAAQ,CAArB;AACA,CAAA,MAAI,MAAM,OAAN,CAAc,OAAd,CAAJ,EAA4B,CAAC,OAAD,EAAU,KAAV,IAAmB,KAAnB,CAA5B,KACK,IAAI,CAAC,OAAO,SAAP,CAAiB,OAAjB,CAAL,EAAgC;AACpC,CAAA,aAAU,KAAK,KAAL,CAAW,KAAX,CAAV;AACA,CAAA,WAAQ,CAAC,QAAQ,OAAT,IAAoB,GAA5B;AACA,CAAA,GAHI,MAGE,IAAI,OAAJ,EAAa;AACnB,CAAA,SAAM,KAAN;AACA,CAAA;AACA,CAAA;;AAED,CAAA,QAAM,SAAS,KAAK,GAAL,CAAS,EAAT,EAAa,SAAb,CAAf;AACA,CAAA,UAAQ,KAAK,KAAL,CAAW,SAAS,KAApB,IAA6B,MAArC;;AAEA,CAAA,QAAO,UAAU,GAAX,GAAkB,KAAxB;AACA,CAAA;;;AAGD,CAAA,KAAI,OAAJ,GAAc;AACb,CAAA,SAAO,KAAK,KAAL,CAAW,OAAO,GAAlB,CAAP;AACA,CAAA;;AAED,CAAA,KAAI,KAAJ,GAAY;AACX,CAAA,SAAO,OAAQ,KAAK,OAAL,GAAe,GAA9B;AACA,CAAA;;;;;;;AAOD,CAAA,UAAS,aAAa,KAAtB,EAA6B;AAC5B,CAAA,QAAM,cAAc,KAAK,KAAL,CAAW,QAAX,GAAsB,OAAtB,CAA8B,GAA9B,EAAmC,EAAnC,CAApB;AACA,CAAA,QAAM,IAAI,aAAa,GAAb,GAAmB,EAA7B;AACA,CAAA,SAAQ,IAAE,CAAE,KAAE,KAAK,OAAQ,MAAG,WAAY,GAA1C;AACA,CAAA;;;;;AAKD,CAAA,WAAU;AACT,CAAA,SAAO,OAAO,GAAd;AACA,CAAA;AAvDwC,CAAA;;;;"}